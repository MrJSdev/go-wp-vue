{
  "root": true,
  "parser": "@babel/eslint-parser",
  "parserOptions": {
    "sourceType": "module"
  },
  "extends": [
    "@nuxtjs/eslint-config-typescript"
  ],
  // add your custom rules here
  "rules": {
    "no-param-reassign": "off",
    "no-void": "off",
    "no-nested-ternary": "off",
    "max-classes-per-file": "off",

    "import/first": "off",
    "import/named": "error",
    "import/namespace": "error",
    "import/default": "error",
    "import/export": "error",
    "import/extensions": "off",
    "import/no-unresolved": "off",
    "import/no-extraneous-dependencies": "off",
    "import/prefer-default-export": "off",
    "prefer-promise-reject-errors": "off",

    // TypeScript
    "quotes": ["warn", "single", { "avoidEscape": true }],
    "@typescript-eslint/explicit-function-return-type": "off",

    // Custom
    "brace-style": ["error", "1tbs", { "allowSingleLine": false }],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "multiline-block-like" },
      { "blankLine": "always", "prev": "*", "next": "return" },
      // Sequence of variable declarations
      { "blankLine": "always", "prev": "*", "next": ["const", "let"] },
      { "blankLine": "always", "prev": ["const", "let"], "next": "*" },
      { "blankLine": "any", "prev": ["const", "let"], "next": ["const", "let"] }
    ],
    "curly": ["error", "all"],
    "max-lines": ["error", {
      "max": 500,
      "skipComments": true,
      "skipBlankLines": true
    }],
    "import/no-relative-parent-imports": "error",
    "import/order": ["error", {
      "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "type"],
      "pathGroups": [
        // Types
        {
          "pattern": "**/types/**",
          "group": "type"
        },
        // Boot
        {
          "pattern": "boot/**",
          "group": "internal",
          "position": "before"
        },
        // Components (no extension)
        {
          "pattern": "components/**/!(*.*)",
          "group": "internal"
        },
        // Components (.vue extension)
        {
          "pattern": "components/**/*.vue",
          "group": "internal",
          "position": "after"
        },
        // Modules
        {
          "pattern": "src/**",
          "group": "internal",
          "position": "before"
        }
      ],
      "pathGroupsExcludedImportTypes": ["internal"],
      "alphabetize": {
        "order": "asc"
      },
      "newlines-between": "never"
    }],
    // To have alphabetical order on named imports
    // import { a, b, c } from "foo";
    "sort-imports": ["error", {
      "ignoreDeclarationSort": true,
      "ignoreCase": true
    }],

    // Vue
    "vue/padding-line-between-blocks": ["error", "always"],
    "vue/component-name-in-template-casing": ["error", "PascalCase"],
    "vue/html-comment-indent": ["error", 2],
    "vue/custom-event-name-casing": ["error", "kebab-case"],
    "vue/new-line-between-multi-line-property": "error",
    "vue/no-empty-component-block": "error",
    "vue/no-useless-mustaches": "error",
    "vue/dot-notation": "error",
    "vue/key-spacing": "error",
    "vue/arrow-spacing": "error",
    "vue/define-macros-order": ["error", {
      "order": ["defineProps", "defineEmits"]
    }],
    "vue/component-tags-order": ["error", {
      "order": ["template", "script", "style"]
    }],
    "vue/object-shorthand": "error",
    // TODO: enable after completing the migration from Options API to Composition API
    // "vue/component-api-style": ["error", ["script-setup"]]

    // Typescript
    // Override of ESLint rules
    // https://github.com/typescript-eslint/typescript-eslint/issues/2483
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "semi": "off",
    "@typescript-eslint/semi": "error",
    "camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variableLike",
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "are", "should", "has", "have", "can", "did", "will"]
      }
    ],
    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": "error",
    // Style enforcements
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
    "@typescript-eslint/member-delimiter-style": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/prefer-as-const": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/array-type": ["error", {
      "default": "array"
    }],
    // Disabled rules
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",

    // Accessibility
    "vuejs-accessibility/alt-text": "error"
  }
}